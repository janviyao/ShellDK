#!/usr/bin/env bpftrace
#include <unistd.h>
#include <asm/posix_types.h>
#include <asm-generic/types.h>
#include <linux/types.h>
#include <linux/workqueue.h>
#include <linux/fs.h>
#include <linux/cred.h>
#include <linux/wait.h>
#include <linux/device.h>
#include <linux/aio.h>
#include <linux/aio_abi.h>
#include <linux/blk_types.h>
#include <linux/blkdev.h>
#include <scsi/scsi_cmnd.h>
#include <scsi/scsi_host.h>
#include <scsi/libiscsi.h>
#include <scsi/scsi_device.h>
#include <scsi/scsi_transport_iscsi.h>

BEGIN
{
    @tpid = (uint64)$1;
    @tpname = "fio";
    @shash = str($2);
	//printf("Tracing %s I/O. Wait for 10s or Hit Ctrl-C to end.\n", @tpname);
}

/*
由于存在bio的拆分合并操作，所以实际上对应有多次io_start，但最终一次io_start的request与iscsi_queuecommand匹配
*/

kprobe:blk_account_io_start
/pid == @tpid/
{
    // arg0: struct request *rq
    $request = (struct request *)arg0;

    @lat[(uint64)$request] = nsecs;
    //printf("%s(%x) %p\n", func, tid, $request);
}

kprobe:iscsi_queuecommand
/pid == @tpid/
{
    // arg0: struct Scsi_Host *host
    // arg1: struct scsi_cmnd *sc
    //$Scsi_Host = (struct Scsi_Host *)arg0;
    $scsi_cmnd = (struct scsi_cmnd *)arg1;

    $request = (struct request *)$scsi_cmnd - 1;
    @mapinfo[tid] = $request;
    //printf("%s(%x) %p %p\n", func, tid, $request, $scsi_cmnd);
}

kprobe:iscsi_session_chkready
/pid == @tpid/
{
    // arg0: struct iscsi_cls_session *session
    $iscsi_cls_session = (struct iscsi_cls_session *)arg0;
    $iscsi_session = (struct iscsi_session *)$iscsi_cls_session->dd_data;
    $iscsi_conn = (struct iscsi_conn *)$iscsi_session->leadconn;
    $work_struct = (struct work_struct *)((uint64)$iscsi_conn + 216);

    if (@mapinfo[tid] != 0) 
    {
        $request = (struct request *)@mapinfo[tid];
        @lat[(uint64)$work_struct] = @lat[(uint64)$request];
        delete(@lat[(uint64)$request]);
        delete(@mapinfo[tid]);
    }
    //printf("%s(%x) %p\n", func, tid, $work_struct);
}

kprobe:queue_work_on
/pid == @tpid/
{
    // arg1: struct workqueue_struct *wq
    // arg2: struct work_struct *work
    $work_struct = (struct work_struct *)arg2;

    if (@lat[(uint64)$work_struct] != 0) 
    {
        //$lat_us = (nsecs - @lat[(uint64)$work_struct])/1000;
        $lat_us = nsecs - @lat[(uint64)$work_struct];

        if (@shash == "cpu")
        {
            @stats[cpu] = stats($lat_us);
        }
        else if (@shash == "tid")
        {
            @stats[tid] = stats($lat_us);
        }
        @lhist["us"] = lhist($lat_us, [lhist_min], [lhist_max], [lhist_step]);

        delete(@lat[(uint64)$work_struct]);
    }
    //printf("%s(%x) %p\n", func, tid, $work_struct);
}

END
{
	clear(@lat);
	clear(@tpid);
	clear(@tpname);
	clear(@shash);
	clear(@mapinfo);
}

/*
kprobe:bio_alloc_bioset
/pid == @tpid/
{
	@bio_alloc_bioset[kstack] = count();
}

kretprobe:bio_alloc_bioset
/pid == @tpid/
{
    $bio = (struct bio *)retval;
    printf("bio_alloc_bioset(%x) %p\n", tid, $bio);
}

kprobe:blk_mq_alloc_request
/pid == @tpid/
{
	@blk_mq_alloc_request[kstack] = count();
}

kretprobe:blk_mq_alloc_request
/pid == @tpid/
{
    $request = (struct request *)retval;
    printf("blk_mq_alloc_request(%x) %p\n", tid, $request);
}

kprobe:blk_insert_cloned_request
/pid == @tpid/
{
    $request = (struct request *)arg1;
    printf("%s(%x) %p\n", func, tid, $request);

	@blk_insert_cloned_request[kstack] = count();
}
*/
