io_submit_one                       struct kioctx *ctx           req->ki_ctx = ctx
->__io_submit_one                     struct aio_kiocb *req        (struct kiocb *)(&req->rw)
->aio_write                           struct kiocb *req
->blkdev_write_iter                   struct kiocb *iocb
->__generic_file_write_iter
->generic_file_direct_write
->mapping->a_ops->direct_IO(iocb, from)
->__blkdev_direct_IO                  struct kiocb *iocb            struct bio *bio
->submit_bio
->submit_bio_noacct
->__submit_bio_noacct_mq
->blk_mq_submit_bio                   struct bio *bio               struct request *rq->bio = bio
->blk_account_io_start
->blk_mq_try_issue_directly
->__blk_mq_delay_run_hw_queue
->__blk_mq_run_hw_queue
->blk_mq_sched_dispatch_requests
->__blk_mq_sched_dispatch_requests
->blk_mq_dispatch_rq_list
->dm_mq_queue_rq
->map_request
->blk_mq_request_issue_directly 
->__blk_mq_issue_directly
->scsi_queue_rq                       struct blk_mq_queue_data *bd  struct request *req = bd->rq        struct scsi_cmnd *cmd = (struct scsi_cmnd *)(req + 1)
->scsi_dispatch_cmd
->iscsi_queuecommand                  struct scsi_cmnd *sc    struct iscsi_task *task    task->sc = sc
->iscsi_conn_queue_work
->queue_work(ihost->workq, &conn->xmitwork)


iscsi_xmitworker
->iscsi_data_xmit
->iscsi_xmit_task
->conn->session->tt->xmit_task(task)
->iscsi_tcp_task_xmit
->session->tt->xmit_pdu(task)
->iscsi_sw_tcp_pdu_xmit
->iscsi_sw_tcp_xmit
->iscsi_sw_tcp_xmit_segment
->kernel_sendmsg


tcp_v4_do_rcv
->tcp_rcv_established
->tcp_data_queue
->iscsi_sw_tcp_data_ready
->tcp_read_sock
->iscsi_sw_tcp_recv
->iscsi_tcp_recv_skb
->iscsi_tcp_hdr_dissect   or   iscsi_tcp_process_data_in
->iscsi_complete_pdu
->__iscsi_complete_pdu
->iscsi_complete_task
->__iscsi_put_task
->iscsi_free_task
->sc->scsi_done(sc)
->scsi_mq_done


scsi_done(scsi_mq_done)
->blk_mq_complete_request
->request->q->mq_ops->complete(request)
->scsi_softirq_done
->scsi_finish_command
->scsi_io_completion
->scsi_end_request
->__blk_mq_end_request
->blk_account_io_done
->request->end_io(request, error)
->end_clone_request                                struct dm_rq_target_io *tio = request->end_io_data             struct request *req = tio->orig
->dm_complete_request
->blk_mq_complete_request
->blk_mq_complete_request_remote
->blk_mq_trigger_softirq
->raise_softirq_irqoff(BLOCK_SOFTIRQ)
->blk_done_softirq
->request->q->mq_ops->complete(request)
->scsi_softirq_done
->scsi_finish_command
->scsi_io_completion
->scsi_end_request
->blk_update_request
->req_bio_endio
->bio_endio
->bio->bi_end_io(bio)
->blkdev_bio_end_io                               struct blkdev_dio *dio = bio->bi_private       struct kiocb *iocb = dio->iocb
->blkdev_dio->iocb->ki_complete(kiocb, ret, 0)
->aio_complete_rw
->aio_complete


blk_done_softirq
->scsi_io_completion
->scsi_end_request
->__blk_mq_end_request
->request->end_io(request, error)
->end_clone_request
->dm_complete_request
->blk_mq_complete_request
->request->q->mq_ops->complete(request)
->dm_softirq_done
->dm_done
->dm_end_request
->blk_mq_end_request
->__blk_mq_end_request
->request->end_io(request, error)

